// Generated by CoffeeScript 1.4.0
(function() {
  var Ascribe, Display, SubDisplay,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  require("./statistics.js");

  Array.prototype.slices = function(slice_count, callback) {
    var i, index, indices, multiplier, val, _i, _ref, _results;
    multiplier = this.length / slice_count;
    _results = [];
    for (i = _i = 0, _ref = slice_count - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      index = i * multiplier;
      indices = [Math.floor(index), Math.floor(index + multiplier) - 1];
      if (indices[0] === indices[1]) {
        val = this[indices[0]];
        _results.push(callback([val]));
      } else {
        _results.push(callback(this.slice.apply(this, indices)));
      }
    }
    return _results;
  };

  module.exports = Ascribe = (function() {

    Ascribe.bars = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(this, args, function(){}).bars();
    };

    function Ascribe(data, options) {
      this.data = data;
      options || (options = {});
      this.x_units = options.x_units || "units";
      this.y_units = options.y_units || "units";
      this.width = options.width || 72;
      this.height = options.height || 8;
      this.display = new Display(this.width, this.height);
      this.y_axis = this.display.sub({
        x0: 0,
        x1: 2,
        y0: 2,
        y1: this.height - 1
      });
      this.x_axis = this.display.sub({
        x0: 1,
        x1: this.width - 1,
        y0: 0,
        y1: 1
      });
      this.y_axis.vertical_line(2, 0, this.y_axis.height, "|");
      this.x_axis.horizontal_line(1, 1, this.x_axis.width - 1, "-");
      this.main = this.display.sub({
        x0: 3,
        x1: this.width - 1,
        y0: 2,
        y1: this.height - 1
      });
      this.sample_function = options.sample_function || "mean";
    }

    Ascribe.prototype.bars = function(char) {
      var bar_max, i, label, max, min, multiplier, normed, num, val, _i, _ref;
      if (char == null) {
        char = "*";
      }
      normed = this.sample_data(this.data, this.main.width, this.sample_function);
      min = normed.min();
      max = normed.max();
      bar_max = max - min;
      this.y_axis.vertical_text(0, this.y_axis.height - 1, max.toString());
      label = "" + (min.toString()) + " " + this.y_units;
      this.y_axis.vertical_text(0, label.length - 1, label);
      label = "" + this.data.length + " " + this.x_units;
      this.x_axis.horizontal_text(this.x_axis.width - label.length, 0, label);
      this.x_axis.center_text(0, "-- time -->");
      multiplier = this.main.height / bar_max;
      for (i = _i = 0, _ref = normed.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        val = normed[i] - min;
        num = Math.floor(val * multiplier);
        this.main.vertical_line(i, 0, num || 1, char);
      }
      return this.display.print();
    };

    Ascribe.prototype.sample_data = function(data, width, sample_function) {
      var norm;
      if (data.length > width) {
        norm = [];
        data.slices(width, function(values) {
          return norm.push(Math.floor(values[sample_function]()));
        });
        return norm;
      } else {
        return data;
      }
    };

    return Ascribe;

  })();

  Ascribe.Display = Display = (function() {

    function Display(width, height, char) {
      var i, x, _i, _len, _ref;
      this.width = width;
      this.height = height;
      if (char == null) {
        char = " ";
      }
      this.data = new Array(this.height);
      _ref = this.data;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        x = _ref[i];
        this.data[i] = new Array(this.width);
      }
      this.clear(char);
    }

    Display.prototype.print = function() {
      console.log();
      this.data.reverse().forEach(function(row) {
        return console.log(row.join(""));
      });
      return console.log();
    };

    Display.prototype.clear = function(char) {
      var y, _i, _ref, _results;
      _results = [];
      for (y = _i = 0, _ref = this.height - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; y = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.horizontal_line(0, y, this.width, char));
      }
      return _results;
    };

    Display.prototype.write = function(x, y, char) {
      if (x > this.width - 1) {
        throw new Error("X value out of bounds");
      } else if (y > this.height - 1) {
        throw new Error("Y value out of bounds");
      } else {
        return this.data[y][x] = char;
      }
    };

    Display.prototype.horizontal_text = function(x, y, string) {
      var char, i, l, _i, _len, _results;
      l = string.length;
      if (x + l > this.width) {
        throw new Error("Horizontal string will not fit in display");
      }
      _results = [];
      for (i = _i = 0, _len = string.length; _i < _len; i = ++_i) {
        char = string[i];
        _results.push(this.write(x + i, y, char));
      }
      return _results;
    };

    Display.prototype.vertical_text = function(x, y, string) {
      var char, i, l, _i, _len, _results;
      l = string.length;
      if ((y + 1) - l < 0) {
        console.log(x, y, l);
        throw new Error("Vertical string will not fit in display");
      }
      _results = [];
      for (i = _i = 0, _len = string.length; _i < _len; i = ++_i) {
        char = string[i];
        _results.push(this.write(x, y - i, char));
      }
      return _results;
    };

    Display.prototype.center_text = function(y, string) {
      var index, l;
      l = string.length;
      index = Math.floor(this.width / 2 - l / 2);
      return this.horizontal_text(index, y, string);
    };

    Display.prototype.vertical_line = function(x, y, height, char) {
      var i, _i, _ref, _results;
      if (char == null) {
        char = "*";
      }
      _results = [];
      for (i = _i = 0, _ref = height - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.write(x, y + i, char));
      }
      return _results;
    };

    Display.prototype.horizontal_line = function(x, y, length, char) {
      var i, _i, _ref, _results;
      if (char == null) {
        char = "*";
      }
      _results = [];
      for (i = _i = 0, _ref = length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.write(x + i, y, char));
      }
      return _results;
    };

    Display.prototype.axes = function() {
      var x, y, _i, _j, _ref, _ref1, _results;
      for (x = _i = 0, _ref = this.width - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; x = 0 <= _ref ? ++_i : --_i) {
        this.write(x, 0, "-");
      }
      _results = [];
      for (y = _j = 1, _ref1 = this.height - 1; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = 1 <= _ref1 ? ++_j : --_j) {
        _results.push(this.write(0, y, "|"));
      }
      return _results;
    };

    Display.prototype.sub = function(options) {
      return new SubDisplay(this, options);
    };

    return Display;

  })();

  SubDisplay = (function(_super) {

    __extends(SubDisplay, _super);

    function SubDisplay(display, options) {
      this.display = display;
      this.x0 = options.x0, this.x1 = options.x1, this.y0 = options.y0, this.y1 = options.y1;
      this.height = this.y1 - this.y0 + 1;
      this.width = this.x1 - this.x0 + 1;
      if (options.clear) {
        this.clear(options.clear);
      }
    }

    SubDisplay.prototype.write = function(x, y, char) {
      if (x > this.width - 1) {
        throw new Error("X value out of bounds");
      } else if (y > this.height - 1) {
        throw new Error("Y value out of bounds");
      }
      return this.display.write(this.x0 + x, this.y0 + y, char);
    };

    SubDisplay.prototype.print = function() {
      throw new Error("Can't print subdisplay");
    };

    return SubDisplay;

  })(Display);

}).call(this);
